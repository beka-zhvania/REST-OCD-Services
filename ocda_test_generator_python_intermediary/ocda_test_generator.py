import request_handler
import prompt_generator
import random
import json
import argparse

def generate_graph_type_related_tests(ocdaName):
    """
    Generates graph type related tests for the specified OCDA using GPT assistant and WebOCD.

    Args:
        ocdaName (str): The name of the OCDA.
        thread_id (str): The ID of the thread.

    Returns:
        None
    """
    prompt_from_webocd = prompt_generator.get_graph_type_based_unit_test_completion_prompt(ocdaName)
    url_process_input = f'http://localhost:8080/ocd/process-input?ocdaName={ocdaName}'
    thread_id = str(random.randint(1, 10000000))
    request_handler.send_and_process_requests(ocdaName, prompt_from_webocd, url_process_input, lambda x: x, thread_id,'text/plain')


def generate_diverse_ocda_parameters(ocdaName):
    """
    Generates diverse OCDA parameters for the specified OCDA using GPT assistant and WebOCD.

    Args:
        ocdaName (str): The name of the OCDA.
        thread_id (str): The ID of the thread.

    Returns:
        None
    """
    # Initial prompt from WebOCD that includes placeholders for OCDA parameters that GPT must generate
    prompt_from_webocd = prompt_generator.get_ocda_parameter_generation_prompt(ocdaName)
    thread_id = str(random.randint(1, 10000000))
    print("generated graph type based tests for " + ocdaName + " using thread_id=" + thread_id)

    if prompt_from_webocd is not None:

        # Send request to GPT to generate OCDA parameter values
        gpt_response = request_handler.send_prompt_to_assistant(prompt_from_webocd, thread_id, "webocd")

        # Request to WebOCD to process the OCDA parameter values generated by GPT
        url_process_input = f'http://localhost:8080/ocd/process-ocda-parameters?ocdaName={ocdaName}'
        webocd_response = request_handler.send_gpt_response_to_webocd(url_process_input, ocdaName, gpt_response,'text/plain')

    else:
        print("Prompt generator content is empty. No request was sent to GPT.")


def get_ocda_method_test_data_to_send(methodNames, gptGeneratedCode):
    """
    Prepares the data as JSON to be sent to WebOCD for processing.

    Args:
        methodNames (str): Names of the methods.
        gptGeneratedCode (str): Code generated by GPT.

    Returns:
        str: JSON data to be sent to WebOCD.
    """
    # Data to be sent in the POST request
    data = {
        'methodNames': methodNames,
        'gptGeneratedCode': gptGeneratedCode
    }

    # Convert the Python dictionary to a JSON string
    json_data = json.dumps(data)

    return json_data


def generate_specific_ocda_method_tests(ocdaName, methodNames):
    """
    Retrieves a prompt from WebOCD to generate unit tests for specified OCDA methods. Then uses the prompt
    with GPT and sends response to WebOCD for processing.

    Args:
        ocdaName (str): The name of the OCDA.
        methodNames (str): Names of the methods.

    Returns:
        str: The prompt for generating unit tests.
    """
    prompt_from_webocd = prompt_generator.get_specific_ocda_method_tests_completion_prompt(ocdaName, methodNames)
    url_process_input = f'http://localhost:8080/ocd/process-specific-ocda-tests?ocdaName={ocdaName}'
    thread_id = str(random.randint(1, 10000000))
    request_handler.send_and_process_requests(ocdaName, prompt_from_webocd, url_process_input, lambda response: get_ocda_method_test_data_to_send(methodNames, response), thread_id, 'application/json')


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Process some integers.')
    parser.add_argument('function', type=str, help='The function to call (generate_graph_type_related_tests, generate_diverse_ocda_parameters, generate_specific_ocda_method_tests)')
    parser.add_argument('ocdaName', type=str, help='The name of the OCDA')
    parser.add_argument('--methodNames', type=str, help='The names of the methods, required only for generate_specific_ocda_method_tests', default='')

    args = parser.parse_args()

    if args.function == 'generate_graph_type_related_tests':
        generate_graph_type_related_tests(args.ocdaName)
    elif args.function == 'generate_diverse_ocda_parameters':
        generate_diverse_ocda_parameters(args.ocdaName)
    elif args.function == 'generate_specific_ocda_method_tests':
        if args.methodNames:  # This function requires an additional argument
            generate_specific_ocda_method_tests(args.ocdaName, args.methodNames)
        else:
            print("Error: methodNames argument is required for generate_specific_ocda_method_tests")
    else:
        print(f"Error: Unknown function {args.function}. Please check the function name and try again.")
