from openai import OpenAI
import shelve
from dotenv import load_dotenv
import os
import time
import helpers

# Load environment variables
load_dotenv()
OPEN_AI_API_KEY = os.getenv("OPEN_AI_API_KEY")
client = OpenAI(api_key=OPEN_AI_API_KEY)


def check_if_thread_exists(thread_id):
    """
    Checks if a thread exists for a given thread ID.

    Args:
        thread_id (str): The thread ID to check for an existing thread.

    Returns:
        str: The thread ID if exists, otherwise None.
    """
    with shelve.open("threads_db") as threads_shelf:
        return threads_shelf.get(thread_id, None)


def store_thread(thread_id, new_thread_id):
    """
    Stores a new thread ID associated with a thread ID.

    Args:
        thread_id (str): The thread ID.
        new_thread_id (str): The new thread ID to store.
    """
    with shelve.open("threads_db", writeback=True) as threads_shelf:
        threads_shelf[thread_id] = new_thread_id


def generate_response(message_body, thread_id, name):
    """
    Generates a response for a given message body and thread ID.

    Args:
        message_body (str): The body of the message.
        thread_id (str): The thread ID.
        name (str): The name associated with the thread ID.

    Returns:
        str: The generated message.
    """
    existing_thread_id = check_if_thread_exists(thread_id)

    if existing_thread_id is None:
        print(f"Creating new thread for {name} with thread_id {thread_id}")
        thread = client.beta.threads.create()
        store_thread(thread_id, thread.id)
        existing_thread_id = thread.id
    else:
        print(f"Retrieving existing thread for {name} with thread_id {thread_id}")
        thread = client.beta.threads.retrieve(existing_thread_id)

    message = client.beta.threads.messages.create(
        thread_id=existing_thread_id,
        role="user",
        content=message_body,
    )
    new_message = run_assistant(thread)

    return new_message


def run_assistant(thread):
    """
    Runs the assistant for a given thread.

    Args:
        thread (Thread): The thread object.

    Returns:
        str: The new message generated by the assistant.
    """
    assistant = client.beta.assistants.retrieve("asst_WM2Alrx2W7OXr5pKIxDl4Ltq")

    run = client.beta.threads.runs.create(
        thread_id=thread.id,
        assistant_id=assistant.id,
    )

    while run.status != "completed":
        time.sleep(0.5)
        run = client.beta.threads.runs.retrieve(thread_id=thread.id, run_id=run.id)

    messages = client.beta.threads.messages.list(thread_id=thread.id)
    new_message = messages.data[0].content[0].text.value

    return new_message


