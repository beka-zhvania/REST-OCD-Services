import gpt_assistant
import requests

# --------------------------------------------------------------
# Communication to WebOCD and Assistant GPT Methods
# --------------------------------------------------------------

def send_prompt_to_assistant(prompt_message, thread_id, name):
    """
    Sends a prompt message to the GPT assistant for generation of responses.

    Args:
        prompt_message (str): The prompt message to send.
        thread_id (str): The ID of the thread.
        name (str): The name associated with the thread.

    Returns:
        str: The response generated by the GPT assistant.
    """
    return gpt_assistant.generate_response(prompt_message, thread_id, name)


def send_gpt_response_to_webocd(url, ocdaName, data_to_send, content_type='text/plain'):
    """
    Sends the response generated by the GPT assistant to WebOCD for further processing.

    Args:
        url (str): The URL to which the data is sent.
        ocdaName (str): The name of the overlapping community detection algorithm.
        data_to_send (str): The GPT response data to be sent to WebOCD.
        content_type (str): The content type of the data being sent.

    Returns:
        requests.Response: The response from the WebOCD service.
    """
    response = requests.post(url, data=data_to_send, headers={'Content-Type': content_type})

    # Check the response status code
    if response.status_code == 200:
        print("Auto-generated unit tests successfully passed to WebOCD", response.headers['Content-Type'])
        # You can access the response content as XML here if needed
        return response
    elif response.status_code == 401:
        print("Passing Auto-generated unit tests to WebOCD failed: Unauthorized")
    else:
        print(f"Passing Auto-generated unit tests to WebOCD failed with status code: {response.status_code}")


def send_and_process_requests(ocdaName, initial_prompt, url_process_input, data_formatter, thread_id, content_type='text/plain', max_iterations=5):
    """
    Sends and processes requests between GPT and WebOCD in a loop until no more issues are found or the maximum number of iterations is reached.

    Args:
        ocdaName (str): The name of the OCDA.
        initial_prompt (str): The initial prompt to send to GPT.
        url_process_input (str): URL for processing input in WebOCD.
        data_formatter (function): A function to format the data sent to WebOCD.
        thread_id (str): The thread ID for tracking.
        content_type (str, optional): The content type for the request. Defaults to 'text/plain'.
        max_iterations (int, optional): Maximum number of iterations. Defaults to 5.

    Returns:
        None
    """
    if initial_prompt is not None:

        # Send request to GPT to complete partially completed unit tests.
        gpt_response = send_prompt_to_assistant(initial_prompt, thread_id, "webocd")

        # Request to WebOCD to process the unit tests completed by GPT
        webocd_response = send_gpt_response_to_webocd(url_process_input, ocdaName, data_formatter(gpt_response), content_type)

        iteration = 0
        while webocd_response is not None and webocd_response.text.strip() and iteration < max_iterations:
            iteration += 1
            print(f"Iteration {iteration} of issue fixing.")
            #print(f"Iteration {iteration}. Response from WebOCD:\n{webocd_response.text}")
            #print("----------------------------------" * 5)

            gpt_response = send_prompt_to_assistant(webocd_response.text, thread_id, "webocd")
            webocd_response = send_gpt_response_to_webocd(url_process_input, ocdaName, data_formatter(gpt_response), content_type)

        print("No more issues to fix or response is None")
    else:
        print("Initial prompt is empty. No request was sent to GPT.")
