package i5.las2peer.services.ocd.automatedtesting.helpers;

import i5.las2peer.services.ocd.algorithms.OcdAlgorithm;

import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static i5.las2peer.services.ocd.automatedtesting.OCDATestAutomationConstants.OCDA_PARAMETER_GENERATION_COUNT_FOR_OCD_ACCURACY_TESTS;

public class OCDAMethodHelpers {
    /**
     * Initializes an instance of a class implementing the OcdAlgorithm interface using its class name.
     * The class is dynamically loaded and instantiated using Java Reflection.
     *
     * @param className The fully qualified name of the class to be instantiated.
     * @return An instance of the specified class implementing the OcdAlgorithm interface.
     * @throws RuntimeException if there is a problem with class loading or instantiation.
     */
    public static OcdAlgorithm initializeOcdAlgorithm(String className) {
        try {
            // Use Java Reflection to create an instance
            Class<?> clazz = Class.forName(className);
            return (OcdAlgorithm) clazz.getDeclaredConstructor().newInstance();
        } catch (ClassNotFoundException e) {
            throw new RuntimeException("Class not found: " + e.getMessage(), e);
        } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e) {
            throw new RuntimeException("Error creating an instance: " + e.getMessage(), e);
        }
    }

    /**
     * Iterates over different sets of algorithm parameters, validates them, and compiles a list of parameter sets
     * that passed the validation. Validation is done by attempting to set the parameters in the algorithm
     * and checking for exceptions.
     *
     * @param algo The instance of the OcdAlgorithm to which the parameters will be set.
     * @param stringifiedOCDAParameters A map where each key is a parameter name and the value is a list of possible parameter values.
     * @param defaultParameterValues A map of default parameter values for the algorithm.
     * @return A list of maps, each representing a set of parameter values that passed validation.
     */
    public static ArrayList<Map<String, String>> validateOCDAParameters(OcdAlgorithm algo, Map<String, List<String>> stringifiedOCDAParameters, Map<String, String> defaultParameterValues) {
        // Initialize a list that will hold final parameter values that passed validation and can be used in tests
        ArrayList<Map<String, String>> finalParameterValues = new ArrayList<>();

        // Iterate over all the different parameter sets (e.g. 5 sets of parameter values generated by GPT)
        // and check if the generated values are valid (based on setParameters implementation of the OCDA)
        // if the parameter values are valid, they will be used in the tests
        int parameterCount = Integer.parseInt(OCDA_PARAMETER_GENERATION_COUNT_FOR_OCD_ACCURACY_TESTS);
        for (int i = 0; i < parameterCount; i++) {
            // Instantiate a map that holds parameters that will be used in the test (need to be checked for validity)
            // initially use default parameter values.
            Map<String, String> usedParameters = new HashMap<>(defaultParameterValues);
            for (String ocdaParameter : stringifiedOCDAParameters.keySet()) {
                // we iterate as many times as there are algorithm parameters. In each iteration replace one
                // default parameter value with the auto-generated parameter value if no error is caused.
                // if there is an error/exception then use the old value
                String oldParameterValue = usedParameters.get(ocdaParameter);
                String newParameterValue = stringifiedOCDAParameters.get(ocdaParameter).get(i);
                usedParameters.put(ocdaParameter, newParameterValue);
                try {
                    // Pass a copy of usedParameters, otherwise the original map will be overwritten
                    algo.setParameters(new HashMap<>(usedParameters));
                } catch (Exception e) {
                    // If parameter setting caused an exception, reset parameter value back to default
                    System.out.println("couldn't set parameter " + ocdaParameter + " with value " + newParameterValue + ". Setting it back to " + oldParameterValue);
                    usedParameters.put(ocdaParameter, oldParameterValue);
                }
            }
            finalParameterValues.add(usedParameters);
        }
        return finalParameterValues;
    }
}
