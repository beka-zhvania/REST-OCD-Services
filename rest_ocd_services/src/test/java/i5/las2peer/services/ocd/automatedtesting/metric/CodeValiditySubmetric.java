package i5.las2peer.services.ocd.automatedtesting.metric;

import i5.las2peer.services.ocd.automatedtesting.ocdparser.OCDAParser;
import i5.las2peer.services.ocd.automatedtesting.ocdparser.OCDTestRunner;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

public class CodeValiditySubmetric {

    /**
     * True if there is no parsing error detected in the parsed code.
     */
    public static boolean isNoParsingErrorFound = true;

    /**
     * True if the parsed code is executable
     */
    public static boolean isNoRuntimeErrorFound = true;

    /**
     * List that holds instructions that will be used to generate the prompt for improving ChatGPT code
     */
    public static ArrayList<String> promptImprovementRemarks = new ArrayList<>();


    /**
     * Evaluates whether the code in a given Java file is parsable without syntax errors.
     * This method uses the OCDAParser to retrieve any parsing errors from the specified file.
     * If no errors are found, the code is considered parsable. If parsing errors are present,
     * they are added to a list of remarks for prompt improvement, to improve subsequent prompts.
     *
     * @param gptOutput The Java file to be evaluated for parsability.
     * @return          {@code true} if the code is parsable (error-free); {@code false} otherwise.
     *                  The method also updates a global flag 'isCodeParsingErrorFree' based on the result.
     *                  Additionally, it populates 'promptImprovementRemarks' with suggestions for fixing
     *                  each identified parsing error, if any are found.
     */
    public static boolean evaluateIsCodeParsable(File gptOutput){

        // Identify and get parsing error list found in the (autogenerated) class file
        List<String> parsingErrors = OCDAParser.getParsingErrors(gptOutput);

        if (parsingErrors.isEmpty()) {
            isNoParsingErrorFound = true;
        } else {
            isNoParsingErrorFound = false;
            for (String parsingError : parsingErrors) {
                promptImprovementRemarks.add("Fix the following on " + parsingError);
            }
        }

        return isNoParsingErrorFound;
    }


    /**
     * Evaluates if the test code in a specified file is runnable by executing the tests.
     *
     * This method uses OCDTestRunner to run the JUnit 5 tests contained in a given file
     * and determines if the code is runnable based on the presence or absence of exceptions
     * during test execution. It collects any exceptions thrown and uses them to assess the
     * executability of the code. If no exceptions are thrown, the code is considered runnable.
     * Otherwise, it's deemed not runnable, and the exceptions are logged for further analysis
     * or prompt for improvement remarks.
     *
     * @param gptOutput The file containing the test class to be evaluated.
     * @return A boolean value indicating whether the code in the file is runnable (true) or not (false).
     */
    public static boolean evaluateIsCodeRunnable(File gptOutput) {
        try {

            // Identify and get exceptions thrown when (autogenerated test) code is executed
            List<String> exceptionsThrown = OCDTestRunner.runCompiledTestClassWithJUnit5(gptOutput);

            if (exceptionsThrown.isEmpty()) {
                isNoRuntimeErrorFound = true;
            } else {
                isNoRuntimeErrorFound = false;
                for (String thrownException : exceptionsThrown) {
                    promptImprovementRemarks.add(thrownException);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return isNoRuntimeErrorFound;
    }

    /**
     * Resets variables of this submetric to be reused
     */
    public void resetCodeValiditySubmetricVariables(){
        promptImprovementRemarks = new ArrayList<>();
        isNoParsingErrorFound = true;
        isNoRuntimeErrorFound = true;
    }

    public static void main(String[] args) {

        File gptInput = new File(OCDAParser.getOCDATestPath("SskAlgorithmTest1.java"));
        //File gptOutput = new File(OCDAParser.getOCDATestPath("SskAlgorithmTest.java"));
        File gptOutput = new File("someFile.java");

        File ocdaCode = new File(OCDAParser.getOCDAPath("SskAlgorithm.java"));


        evaluateIsCodeParsable(gptOutput);
        evaluateIsCodeRunnable(gptInput);
        System.out.println("isNoParsingErrorFound = " + isNoParsingErrorFound + " | isNoRuntimeErrorFound = " + isNoRuntimeErrorFound);
        for (String remark : promptImprovementRemarks) {
            System.out.println(remark);
        }

    }

}
