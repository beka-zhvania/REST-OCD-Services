package i5.las2peer.services.ocd.algorithms;

import static org.junit.jupiter.api.Assertions.*;

import i5.las2peer.services.ocd.automatedtesting.helpers.OCDATestExceptionHandler;
import i5.las2peer.services.ocd.ocdatestautomation.test_interfaces.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import i5.las2peer.services.ocd.adapters.AdapterException;
import i5.las2peer.services.ocd.algorithms.utils.OcdAlgorithmException;
import i5.las2peer.services.ocd.graphs.Cover;
import i5.las2peer.services.ocd.graphs.CoverCreationLog;
import i5.las2peer.services.ocd.graphs.CustomGraph;
import i5.las2peer.services.ocd.metrics.OcdMetricException;
import i5.las2peer.services.ocd.testsUtils.OcdTestGraphFactory;

import java.io.FileNotFoundException;
import java.util.HashMap;
import java.util.Map;

import org.la4j.matrix.Matrix;

import org.graphstream.graph.Node;


public class ClizzAlgorithmTest implements UndirectedGraphTestReq,  DirectedGraphTestReq, WeightedGraphTestReq, OCDAParameterTestReq {

	OcdAlgorithm algo;

	@BeforeEach
	public void setup() {
		algo = new ClizzAlgorithm();
	}

	@Override
	public OcdAlgorithm getAlgorithm() {
		return algo;
	}


	/**
	 * Auto-Generated by ChatGPT
	 * Executes ClizzAlgorithm on a weighted graph. The influence factor is set higher to test
	 * its impact on larger influence ranges. The membershipsIterationBound is set to a higher
	 * value to assess the algorithm's performance with more iterations. The membershipsPrecisionFactor
	 * is set lower to test the algorithm's precision in a more fine-grained membership assignation.
	 */
	@Test
	public void weightedGraphTest1() throws Exception {
		try {

			CustomGraph weightedGraph = OcdTestGraphFactory.getTwoCommunitiesWeightedGraph(); // Don't modify

			Map<String, String> parameters = new HashMap<>();
			// Higher influence factor to test larger influence ranges
			parameters.put("influenceFactor", "1.2");
			// Higher iteration bound for thorough computation
			parameters.put("membershipsIterationBound", "1500");
			// Lower precision factor for more precise membership assignation
			parameters.put("membershipsPrecisionFactor", "0.0005");
			getAlgorithm().setParameters(parameters);
			Cover cover = getAlgorithm().detectOverlappingCommunities(weightedGraph); // Don't modify

			assertTrue(cover.getCommunities().size() >= 1); // Don't modify

		} catch (Exception e) {

			OCDATestExceptionHandler.handleException(e); // Don't modify

		}
	}

	/**
	 * Auto-Generated by ChatGPT
	 * Executes ClizzAlgorithm on a directed graph. The influence factor is set to a medium value to test
	 * the algorithm's sensitivity to influence ranges. The membershipsIterationBound is set lower to
	 * assess the algorithm's capability to converge faster. The membershipsPrecisionFactor is set higher
	 * to test the algorithm's robustness with a less precise membership assignation.
	 */
	@Test
	public void directedGraphTest1() throws Exception {
		try {

			CustomGraph directedGraph = OcdTestGraphFactory.getDirectedAperiodicTwoCommunitiesGraph(); // Don't modify

			Map<String, String> parameters = new HashMap<>();
			// Medium influence factor to test algorithm sensitivity
			parameters.put("influenceFactor", "0.7");
			// Lower iteration bound to test faster convergence
			parameters.put("membershipsIterationBound", "800");
			// Higher precision factor for less precise membership assignation
			parameters.put("membershipsPrecisionFactor", "0.005");
			getAlgorithm().setParameters(parameters);
			Cover cover = getAlgorithm().detectOverlappingCommunities(directedGraph); // Don't modify

			assertTrue(cover.getCommunities().size() >= 1); // Don't modify

		} catch (Exception e) {

			OCDATestExceptionHandler.handleException(e); // Don't modify

		}
	}

	/**
	 * Auto-Generated by ChatGPT
	 * Executes ClizzAlgorithm on an undirected graph. The influence factor is set lower to test
	 * the algorithm's behavior with smaller influence ranges. The membershipsIterationBound is set to a very high
	 * value to thoroughly test the algorithm's stability over many iterations. The membershipsPrecisionFactor is set
	 * to an intermediate value to balance between precision and computational load.
	 */
	@Test
	public void undirectedGraphTest1() throws Exception {
		try {

			CustomGraph undirectedGraph = OcdTestGraphFactory.getUndirectedBipartiteGraph(); // Don't modify

			Map<String, String> parameters = new HashMap<>();
			// Lower influence factor to test smaller influence ranges
			parameters.put("influenceFactor", "0.6");
			// Very high iteration bound for algorithm stability test
			parameters.put("membershipsIterationBound", "2000");
			// Intermediate precision factor for balanced testing
			parameters.put("membershipsPrecisionFactor", "0.002");
			getAlgorithm().setParameters(parameters);

			Cover cover = getAlgorithm().detectOverlappingCommunities(undirectedGraph); // Don't modify
			assertTrue(cover.getCommunities().size() >= 1); // Don't modify

		} catch (Exception e) {

			OCDATestExceptionHandler.handleException(e); // Don't modify

		}
	}

	/*
	 * Tests the algorithm on the sawmill graph
	 */
	@Disabled //TODO: remove 555
	@Test
	public void testOnSawmill() throws OcdAlgorithmException, AdapterException, FileNotFoundException, InterruptedException, OcdMetricException {
		CustomGraph graph = OcdTestGraphFactory.getSawmillGraph();
		OcdAlgorithm algo = new ClizzAlgorithm();
		Cover cover = algo.detectOverlappingCommunities(graph);
		//System.out.println(cover.toString());
	}

	@Disabled //TODO: remove 555
	@Test
	public void testOnSawmillbyFunctions() throws OcdAlgorithmException, AdapterException, FileNotFoundException, InterruptedException {
		CustomGraph graph = OcdTestGraphFactory.getSawmillGraph();
		ClizzAlgorithm algo = new ClizzAlgorithm();
		Map<String, String> parameters = new HashMap<String, String>();
		parameters.put(ClizzAlgorithm.INFLUENCE_FACTOR_NAME, Double.toString(0.9));
		parameters.put(ClizzAlgorithm.MEMBERSHIPS_ITERATION_BOUND_NAME, Integer.toString(1000));
		parameters.put(ClizzAlgorithm.MEMBERSHIPS_PRECISION_FACTOR_NAME, Double.toString(0.001));
		algo.setParameters(parameters);
		Matrix distances = algo.calculateNodeDistances(graph);
		//System.out.println("Distances:");
		//System.out.println(distances);
		Map<Node, Double> leadershipValues = algo.calculateLeadershipValues(graph, distances);
		//System.out.println("Leaderships:");
		//System.out.println(leadershipValues);
		Map<Node, Integer> leaders = algo.determineCommunityLeaders(graph, distances, leadershipValues);
		//System.out.println("Leaders:");
		//System.out.println(leaders);
		for(Node leader : leaders.keySet()) {
			//System.out.println(graph.getNodeName(leader));
		}
		Matrix memberships = algo.calculateMemberships(graph, leaders);
		//System.out.println("Memberships:");
		//System.out.println(memberships);
		Cover cover = new Cover(graph, memberships);
		cover.setCreationMethod(new CoverCreationLog(algo.getAlgorithmType(), algo.getParameters(), algo.compatibleGraphTypes()));
		System.out.println(cover);
	}

	@Disabled //TODO: remove 555
	@Test
	public void testOnAperiodicTwoCommunities() throws OcdAlgorithmException, AdapterException, FileNotFoundException, InterruptedException {
		CustomGraph graph = OcdTestGraphFactory.getAperiodicTwoCommunitiesGraph();
		ClizzAlgorithm algo = new ClizzAlgorithm();
		Map<String, String> parameters = new HashMap<String, String>();
		parameters.put(ClizzAlgorithm.INFLUENCE_FACTOR_NAME, Double.toString(0.9));
		parameters.put(ClizzAlgorithm.MEMBERSHIPS_ITERATION_BOUND_NAME, Integer.toString(1000));
		parameters.put(ClizzAlgorithm.MEMBERSHIPS_PRECISION_FACTOR_NAME, Double.toString(0.001));
		algo.setParameters(parameters);
		Matrix distances = algo.calculateNodeDistances(graph);
		System.out.println("Distances:");
		System.out.println(distances);
		Map<Node, Double> leadershipValues = algo.calculateLeadershipValues(graph, distances);
		System.out.println("Leaderships:");
		System.out.println(leadershipValues);
		Map<Node, Integer> leaders = algo.determineCommunityLeaders(graph, distances, leadershipValues);
		System.out.println("Leaders:");
		System.out.println(leaders);
		Matrix memberships = algo.calculateMemberships(graph, leaders);
		System.out.println("Memberships:");
		System.out.println(memberships);
		Cover cover = new Cover(graph, memberships);
		cover.setCreationMethod(new CoverCreationLog(algo.getAlgorithmType(), algo.getParameters(), algo.compatibleGraphTypes()));
		assertEquals(2, cover.communityCount());
		for(int i=0; i<graph.getNodeCount(); i++) {
			double belongingFac;
			switch(i) {
				case 0:
					belongingFac = 0;
					break;
				case 1:
					belongingFac = 0.126;
					break;
				case 2:
					belongingFac = 0.064;
					break;
				case 3:
					belongingFac = 0.064;
					break;
				case 4:
					belongingFac = 0.126;
					break;
				case 5: 
					belongingFac = 1;
					break;
				case 6:
					belongingFac = 1;
					break;
				case 7:
					belongingFac = 1;
					break;
				case 8:
					belongingFac = 1;
					break;
				case 9:
					belongingFac = 1;
					break;
				case 10:
					belongingFac = 0.314;
					break;
				default:
					belongingFac = -1;
					break;
			}
			assertTrue(Math.abs(belongingFac - cover.getBelongingFactor(graph.nodes().toArray(Node[]::new)[i], 0)) < 0.003
					|| Math.abs(belongingFac - cover.getBelongingFactor(graph.nodes().toArray(Node[]::new)[i], 1)) < 0.003);
			System.out.println(cover);
		}
		
	}
	
}
