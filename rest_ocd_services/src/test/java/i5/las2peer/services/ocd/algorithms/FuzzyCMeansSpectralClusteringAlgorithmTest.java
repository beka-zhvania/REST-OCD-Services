package i5.las2peer.services.ocd.algorithms;

import i5.las2peer.services.ocd.ocdatestautomation.test_interfaces.OCDAParameterTestReq;
import i5.las2peer.services.ocd.ocdatestautomation.test_interfaces.UndirectedGraphTestReq;
import i5.las2peer.services.ocd.ocdatestautomation.test_interfaces.WeightedGraphTestReq;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import static i5.las2peer.services.ocd.algorithms.FuzzyCMeansSpectralClusteringAlgorithm.*;
import static i5.las2peer.services.ocd.algorithms.FuzzyCMeansSpectralClusteringAlgorithm.EPSILON_NAME;
import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Assertions.fail;

import i5.las2peer.services.ocd.automatedtesting.helpers.OCDWriter;
import java.util.ArrayList;
import java.util.List;
import org.la4j.matrix.Matrix;
import org.la4j.matrix.dense.Basic2DMatrix;

import i5.las2peer.services.ocd.adapters.AdapterException;
import i5.las2peer.services.ocd.algorithms.utils.OcdAlgorithmException;
import i5.las2peer.services.ocd.graphs.Cover;
import i5.las2peer.services.ocd.graphs.CustomGraph;
import i5.las2peer.services.ocd.metrics.OcdMetricException;
import i5.las2peer.services.ocd.testsUtils.OcdTestGraphFactory;

import java.util.HashMap;
import java.util.Map;
import java.io.FileNotFoundException;
import java.util.HashMap;
import java.util.Map;

public class FuzzyCMeansSpectralClusteringAlgorithmTest implements UndirectedGraphTestReq, WeightedGraphTestReq
		, OCDAParameterTestReq {

	OcdAlgorithm algo;

	@BeforeEach
	public void setup() {
		algo = new FuzzyCMeansSpectralClusteringAlgorithm();
	}

	@Override
	public OcdAlgorithm getAlgorithm() {
		return algo;
	}

	/**
	 * Auto-Generated by ChatGPT.
	 * Executes FuzzyCMeansSpectralClusteringAlgorithm on a weighted graph.
	 * The parameters are set to test the algorithm's behavior with a higher number of clusters (K=30),
	 * a more strict convergence criterion (epsilon=1e-4), a higher degree of fuzziness (fuzziness=1.5),
	 * and to optimize the cluster quantity and set the max number of iterations.
	 */
	@Test
	public void weightedGraphTest1() throws Exception {
		try {

			CustomGraph weightedGraph = OcdTestGraphFactory.getTwoCommunitiesWeightedGraph(); // Don't modify


			Map<String, String> parameters = new HashMap<>(); // Don't modify

			// setting a higher number of clusters
			parameters.put(K_NAME, "30");
			// setting a higher degree of fuzziness
			parameters.put(FUZZINESS_NAME, "1.5");
			// setting a more strict convergence criterion
			parameters.put(EPSILON_NAME, "1e-4");
			// setting optimize cluster quantity
			parameters.put(OPTIMIZE_CLUSTER_QUANTITY_NAME, "true");
			// setting max number of iterations
			parameters.put(MAX_ITERATIONS_NAME, "1000");

			getAlgorithm().setParameters(parameters); // Don't modify


			Cover cover = getAlgorithm().detectOverlappingCommunities(weightedGraph); // Don't modify


			assertTrue(cover.getCommunities().size() >= 1); // Don't modify

		} catch (Throwable t) {

			fail("Test failed due to an exception or assertion error: " + t.getMessage()); // Don't modify


			throw t; // Don't modify

		}
	}

	/**
	 * Auto-Generated by ChatGPT.
	 * Executes FuzzyCMeansSpectralClusteringAlgorithm on an undirected bipartite graph.
	 * The parameters are set to test the algorithm's behavior with a lower number of clusters (K=5),
	 * not optimizing the cluster quantity, a maximum number of iterations (maxIterations=500),
	 * a standard degree of fuzziness (fuzziness=1.1), and the default convergence criterion (epsilon=1e-3).
	 */
	@Test
	public void undirectedGraphTest1() throws Exception {
		try {

			CustomGraph undirectedGraph = OcdTestGraphFactory.getUndirectedBipartiteGraph(); // Don't modify


			Map<String, String> parameters = new HashMap<>(); // Don't modify

			// setting a lower number of clusters
			parameters.put(K_NAME, "5");
			// not optimizing cluster quantity
			parameters.put(OPTIMIZE_CLUSTER_QUANTITY_NAME, "false");
			// setting a specific max number of iterations
			parameters.put(MAX_ITERATIONS_NAME, "500");
			// setting fuzziness
			parameters.put(FUZZINESS_NAME, "1.1");
			// setting the default convergence criterion
			parameters.put(EPSILON_NAME, "1e-3");
			getAlgorithm().setParameters(parameters); // Don't modify
			Cover cover = getAlgorithm().detectOverlappingCommunities(undirectedGraph); // Don't modify
			assertTrue(cover.getCommunities().size() >= 1); // Don't modify

		} catch (Throwable t) {

			fail("Test failed due to an exception or assertion error: " + t.getMessage()); // Don't modify
			throw t; // Don't modify

		}
	}

	/*
	 * Run the algorithm on sawmill grpah
	 */
	@Disabled //TODO: remove 555
	@Test
	public void testOnSawmill() throws OcdAlgorithmException, AdapterException, FileNotFoundException, InterruptedException {
		
		// Instantiate the algorithm
		FuzzyCMeansSpectralClusteringAlgorithm fuzzy = new FuzzyCMeansSpectralClusteringAlgorithm(); // instance of fuzzy algorithm
		
		// Set parameters
		Map<String, String> inputParams = new HashMap<String, String>();
		inputParams.put("k", "8");
		inputParams.put("optimizeClusterQuantity", "true");
		inputParams.put("fuzziness", "1.7");
		inputParams.put("customThreshold", "0.2");
		fuzzy.setParameters(inputParams);
		
		CustomGraph sawmill = OcdTestGraphFactory.getSawmillGraph();
		
		try {
			Cover c = fuzzy.detectOverlappingCommunities(sawmill);
			//System.out.println(c.toString());
		} catch (OcdAlgorithmException | OcdMetricException | InterruptedException e) {
			e.printStackTrace();
		}
		
	}
	
	/*
	 * Test Modularity function on a very simple graph
	 */
	@Disabled //TODO: remove 555
	@Test
	public void ModularityFunctionTest() {
		
		FuzzyCMeansSpectralClusteringAlgorithm fuzzy = new FuzzyCMeansSpectralClusteringAlgorithm(); // instance of fuzzy algorithm

		
		Matrix membership_matrix = new Basic2DMatrix(2,2);
		membership_matrix.set(0, 0, 1);
		membership_matrix.set(0, 1, 0);	
		membership_matrix.set(1, 0, 1);
		membership_matrix.set(1, 1, 0);
	
		
		Matrix Weights = new Basic2DMatrix(2,2);
		
		for(int i =0; i<2; i++) {
			
			for(int j =0; j<2;j++) {
				
				Weights.set(i,j,2.0);
				
			}
		}
		
		double real_modularity = fuzzy.modularityFunction(membership_matrix, Weights,0.0);
		//assertEquals(0.25, real_modularity);
		assertEquals(0.25, real_modularity, 0.01);
	}
}
