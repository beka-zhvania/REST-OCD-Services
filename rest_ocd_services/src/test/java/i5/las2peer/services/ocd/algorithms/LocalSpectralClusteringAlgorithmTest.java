package i5.las2peer.services.ocd.algorithms;

import i5.las2peer.services.ocd.adapters.AdapterException;
import i5.las2peer.services.ocd.algorithms.utils.OcdAlgorithmException;
import i5.las2peer.services.ocd.graphs.Cover;
import i5.las2peer.services.ocd.graphs.CustomGraph;
import i5.las2peer.services.ocd.metrics.OcdMetricException;
import i5.las2peer.services.ocd.ocdatestautomation.test_interfaces.OCDAParameterTestReq;
import i5.las2peer.services.ocd.ocdatestautomation.test_interfaces.UndirectedGraphTestReq;
import i5.las2peer.services.ocd.ocdatestautomation.test_interfaces.WeightedGraphTestReq;
import i5.las2peer.services.ocd.ocdatestautomation.test_interfaces.ZeroWeightsGraphTestReq;
import i5.las2peer.services.ocd.testsUtils.OcdTestGraphFactory;

import java.io.FileNotFoundException;
import java.util.HashMap;
import java.util.Map;

import org.graphstream.graph.Node;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertTrue;

import static i5.las2peer.services.ocd.algorithms.LocalSpectralClusteringAlgorithm.*;
import static i5.las2peer.services.ocd.algorithms.LocalSpectralClusteringAlgorithm.RANDOM_WALK_STEPS_NAME;
import static org.junit.jupiter.api.Assertions.fail;

public class LocalSpectralClusteringAlgorithmTest implements ZeroWeightsGraphTestReq, UndirectedGraphTestReq,
		WeightedGraphTestReq, OCDAParameterTestReq {

	OcdAlgorithm algo;

	@BeforeEach
	public void setup() {
		algo = new LocalSpectralClusteringAlgorithm();
	}

	@Override
	public OcdAlgorithm getAlgorithm() {
		return algo;
	}

	/**
	 * Auto-Generated by ChatGPT.
	 * Executes LocalSpectralClusteringAlgorithm on a graph with a mix of zero and non-zero weights.
	 * The algorithm parameters are set to test the algorithm's robustness in handling graphs with edge weight variations.
	 */
	@Test
	public void zeroWeightsGraphTest1() throws Exception {
		try {

			CustomGraph zeroWeightsGraph = OcdTestGraphFactory.getZeroAndNonZeroWeightMixGraph(); // Don't modify
			Map<String, String> parameters = new HashMap<>(); // Don't modify
			Node node = zeroWeightsGraph.getNode("0");
			zeroWeightsGraph.setNodeName(node,"0");
			parameters.put(COMMA_SEPARATED_SEED_SET_NAME, "0");
			parameters.put(MINIMUM_COMMUNITY_SIZE_NAME, "5");
			parameters.put(MAXIMUM_COMMUNITY_SIZE_NAME, "50");
			parameters.put(EXPANSION_STEP_SIZE_NAME, "4");
			parameters.put(BIASED_NAME, "false");
			parameters.put(SUBSPACE_DIMENSION_NAME, "2");
			parameters.put(RANDOM_WALK_STEPS_NAME, "5");
			getAlgorithm().setParameters(parameters); // Don't modify
			Cover cover = getAlgorithm().detectOverlappingCommunities(zeroWeightsGraph); // Don't modify
			assertTrue(cover.getCommunities().size() >= 1); // Don't modify

		} catch (Throwable t) {

			fail("Test failed due to an exception or assertion error: " + t.getMessage()); // Don't modify
			throw t; // Don't modify

		}
	}

	/**
	 * Auto-Generated by ChatGPT.
	 * Executes LocalSpectralClusteringAlgorithm on an undirected bipartite graph.
	 * The algorithm parameters are set to test the algorithm's performance on undirected and potentially large bipartite communities.
	 */
	@Test
	public void undirectedGraphTest1() throws Exception {
		try {

			CustomGraph undirectedGraph = OcdTestGraphFactory.getUndirectedBipartiteGraph(); // Don't modify
			Map<String, String> parameters = new HashMap<>(); // Don't modify
			Node node = undirectedGraph.getNode("0");
			undirectedGraph.setNodeName(node,"0");
			parameters.put(COMMA_SEPARATED_SEED_SET_NAME, "0");
			parameters.put(MINIMUM_COMMUNITY_SIZE_NAME, "10");
			parameters.put(MAXIMUM_COMMUNITY_SIZE_NAME, "100");
			parameters.put(EXPANSION_STEP_SIZE_NAME, "8");
			parameters.put(BIASED_NAME, "true");
			parameters.put(SUBSPACE_DIMENSION_NAME, "5");
			parameters.put(RANDOM_WALK_STEPS_NAME, "10");
			getAlgorithm().setParameters(parameters); // Don't modify
			Cover cover = getAlgorithm().detectOverlappingCommunities(undirectedGraph); // Don't modify
			assertTrue(cover.getCommunities().size() >= 1); // Don't modify

		} catch (Throwable t) {

			fail("Test failed due to an exception or assertion error: " + t.getMessage()); // Don't modify
			throw t; // Don't modify

		}
	}

	/*
	 * Tests the algorithm on the sawmill graph
	 */
	@Test
	@Disabled //TODO: remove 555
	public void testOnSawmill() throws OcdAlgorithmException, AdapterException, FileNotFoundException, InterruptedException, OcdMetricException {
		
		CustomGraph graph = OcdTestGraphFactory.getSawmillGraph();
		OcdAlgorithm algo = new LocalSpectralClusteringAlgorithm();
		
		Map<String, String> parameters = new HashMap<String, String>();
		parameters.put(LocalSpectralClusteringAlgorithm.COMMA_SEPARATED_SEED_SET_NAME, "2,34");
		algo.setParameters(parameters);
				
		Cover cover = algo.detectOverlappingCommunities(graph);
		
		//System.out.println(cover.toString());
		
		parameters = new HashMap<String, String>();
		parameters.put(LocalSpectralClusteringAlgorithm.COMMA_SEPARATED_SEED_SET_NAME, "9,11");
		algo.setParameters(parameters);
				
		cover = algo.detectOverlappingCommunities(graph);
		
		//System.out.println(cover.toString());
		
		parameters = new HashMap<String, String>();
		parameters.put(LocalSpectralClusteringAlgorithm.COMMA_SEPARATED_SEED_SET_NAME, "13,14,21");
		algo.setParameters(parameters);
				
		cover = algo.detectOverlappingCommunities(graph);
		
		//System.out.println(cover.toString());
	}
	
}
