package i5.las2peer.services.ocd.algorithms;

import i5.las2peer.services.ocd.ocdatestautomation.test_interfaces.OCDAParameterTestReq;
import i5.las2peer.services.ocd.ocdatestautomation.test_interfaces.UndirectedGraphTestReq;
import i5.las2peer.services.ocd.testsUtils.OcdTestGraphFactory;
import org.graphstream.graph.Node;

import i5.las2peer.services.ocd.graphs.CustomGraph;
import i5.las2peer.services.ocd.graphs.Cover;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Assertions.assertTrue;


public class MemeticLinkClusteringAlgorithmTest implements UndirectedGraphTestReq, OCDAParameterTestReq {

    OcdAlgorithm algo;

    @BeforeEach
    public void setup() {
        algo = new MemeticLinkClusteringAlgorithm();
    }

    @Override
    public OcdAlgorithm getAlgorithm() {
        return algo;
    }

    /**
     * Auto-Generated by ChatGPT83
     * Tests the MemeticLinkClusteringAlgorithm on an undirected bipartite graph.
     * This algorithm does not take any parameters.
     */
    @Test
    public void undirectedGraphTest1() throws Exception {
        try {

            CustomGraph undirectedGraph = OcdTestGraphFactory.getUndirectedBipartiteGraph(); // Don't modify
            Map<String, String> parameters = new HashMap<>(); // Don't modify
            // No parameters to set for MemeticLinkClusteringAlgorithm
            getAlgorithm().setParameters(parameters); // Don't modify
            Cover cover = getAlgorithm().detectOverlappingCommunities(undirectedGraph); // Don't modify
            assertTrue(cover.getCommunities().size() >= 1); // Don't modify

        } catch (Throwable t) {

            fail("Test failed due to an exception or assertion error: " + t.getMessage()); // Don't modify


            throw t; // Don't modify

        }
    }

    @Disabled //TODO: remove 555
    @Test
    public void CustomGraphTest(){

        try {
            CustomGraph graph = new CustomGraph();
            Node n1 = graph.addNode(Integer.toString(0));
            Node n2 = graph.addNode(Integer.toString(1));
            Node n3 = graph.addNode(Integer.toString(2));
            Node n4 = graph.addNode(Integer.toString(3));
            Node n5 = graph.addNode(Integer.toString(4));
            Node n6 = graph.addNode(Integer.toString(5));

            graph.addEdge(UUID.randomUUID().toString(), n1, n2);
            graph.addEdge(UUID.randomUUID().toString(), n2, n3);
            graph.addEdge(UUID.randomUUID().toString(), n3, n1);
            graph.addEdge(UUID.randomUUID().toString(), n4, n5);
            graph.addEdge(UUID.randomUUID().toString(), n5, n6);
            graph.addEdge(UUID.randomUUID().toString(), n6, n4);


            OcdAlgorithm algo = new MemeticLinkClusteringAlgorithm();
            Cover cover = algo.detectOverlappingCommunities(graph);
            //System.out.println(cover.toString());

        }catch(Exception e){e.printStackTrace();}
    }
}
