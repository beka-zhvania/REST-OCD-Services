package i5.las2peer.services.ocd.algorithms;

import i5.las2peer.services.ocd.graphs.Cover;
import i5.las2peer.services.ocd.graphs.CustomGraph;
import i5.las2peer.services.ocd.ocdatestautomation.test_interfaces.DirectedGraphTestReq;
import i5.las2peer.services.ocd.ocdatestautomation.test_interfaces.OCDAParameterTestReq;
import i5.las2peer.services.ocd.ocdatestautomation.test_interfaces.UndirectedGraphTestReq;
import i5.las2peer.services.ocd.ocdatestautomation.test_interfaces.WeightedGraphTestReq;
import i5.las2peer.services.ocd.testsUtils.OcdTestGraphFactory;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.HashMap;
import java.util.Map;

import static i5.las2peer.services.ocd.algorithms.ExtendedSpeakerListenerLabelPropagationAlgorithm.MEMORY_SIZE_NAME;
import static i5.las2peer.services.ocd.algorithms.ExtendedSpeakerListenerLabelPropagationAlgorithm.PROBABILITY_THRESHOLD_NAME;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.fail;

class ExtendedSpeakerListenerLabelPropagationAlgorithmTest implements DirectedGraphTestReq, UndirectedGraphTestReq,
        WeightedGraphTestReq, OCDAParameterTestReq {

    OcdAlgorithm algo;

    @BeforeEach
    public void setup() {
        algo = new ExtendedSpeakerListenerLabelPropagationAlgorithm();
    }

    @Override
    public OcdAlgorithm getAlgorithm() {
        return algo;
    }

    /**
     * Auto-Generated by ChatGPT.
     * Executes ExtendedSpeakerListenerLabelPropagationAlgorithm on a weighted graph.
     * The memorySize is set to test the algorithm's capability to process with a large amount of memory.
     * The probabilityThreshold is set to a lower value to test the algorithm's sensitivity to label occurrence.
     */
    @Test
    public void weightedGraphTest1() throws Exception {
        try {

            CustomGraph weightedGraph = OcdTestGraphFactory.getTwoCommunitiesWeightedGraph(); // Don't modify


            Map<String, String> parameters = new HashMap<>(); // Don't modify

            // Setting memorySize to a larger value to test algorithm's performance with more memory
            parameters.put(MEMORY_SIZE_NAME, "200");
            // Setting probabilityThreshold to a lower value to test sensitivity
            parameters.put(PROBABILITY_THRESHOLD_NAME, "0.05");

            getAlgorithm().setParameters(parameters); // Don't modify


            Cover cover = getAlgorithm().detectOverlappingCommunities(weightedGraph); // Don't modify


            assertTrue(cover.getCommunities().size() >= 1); // Don't modify

        } catch (Throwable t) {

            fail("Test failed due to an exception or assertion error: " + t.getMessage()); // Don't modify


            throw t; // Don't modify

        }
    }

    /**
     * Auto-Generated by ChatGPT.
     * Executes ExtendedSpeakerListenerLabelPropagationAlgorithm on a directed graph.
     * The memorySize is set to test the algorithm's performance under minimal memory.
     * The probabilityThreshold is set to a higher value to reduce the noise and focus on strong community signals.
     */
    @Test
    public void directedGraphTest1() throws Exception {
        try {

            CustomGraph directedGraph = OcdTestGraphFactory.getDirectedAperiodicTwoCommunitiesGraph(); // Don't modify


            Map<String, String> parameters = new HashMap<>(); // Don't modify

            // Setting memorySize to a smaller value to test algorithm's efficiency with less memory
            parameters.put(MEMORY_SIZE_NAME, "10");
            // Setting probabilityThreshold to a higher value to focus on strong signals
            parameters.put(PROBABILITY_THRESHOLD_NAME, "0.2");

            getAlgorithm().setParameters(parameters); // Don't modify


            Cover cover = getAlgorithm().detectOverlappingCommunities(directedGraph); // Don't modify


            assertTrue(cover.getCommunities().size() >= 1); // Don't modify

        } catch (Throwable t) {

            fail("Test failed due to an exception or assertion error: " + t.getMessage()); // Don't modify


            throw t; // Don't modify

        }
    }

    /**
     * Auto-Generated by ChatGPT.
     * Executes ExtendedSpeakerListenerLabelPropagationAlgorithm on an undirected graph.
     * The memorySize is set to a mid-range value to balance performance and memory usage.
     * The probabilityThreshold is set to a middle value to test algorithm's general behavior with balanced sensitivity.
     */
    @Test
    public void undirectedGraphTest1() throws Exception {
        try {

            CustomGraph undirectedGraph = OcdTestGraphFactory.getUndirectedBipartiteGraph(); // Don't modify


            Map<String, String> parameters = new HashMap<>(); // Don't modify
            // Setting memorySize to a mid-range value for balanced performance
            parameters.put(MEMORY_SIZE_NAME, "50");
            // Setting probabilityThreshold to a middle value for balanced sensitivity
            parameters.put(PROBABILITY_THRESHOLD_NAME, "0.1");
            getAlgorithm().setParameters(parameters); // Don't modify
            Cover cover = getAlgorithm().detectOverlappingCommunities(undirectedGraph); // Don't modify
            assertTrue(cover.getCommunities().size() >= 1); // Don't modify

        } catch (Throwable t) {

            fail("Test failed due to an exception or assertion error: " + t.getMessage()); // Don't modify
            throw t; // Don't modify

        }
    }


}