package i5.las2peer.services.ocd.algorithms;

import i5.las2peer.services.ocd.adapters.AdapterException;
import i5.las2peer.services.ocd.algorithms.utils.OcdAlgorithmException;
import i5.las2peer.services.ocd.graphs.Cover;
import i5.las2peer.services.ocd.graphs.CustomGraph;
import i5.las2peer.services.ocd.ocdatestautomation.test_interfaces.DirectedGraphTestReq;
import i5.las2peer.services.ocd.ocdatestautomation.test_interfaces.OCDAParameterTestReq;
import i5.las2peer.services.ocd.ocdatestautomation.test_interfaces.UndirectedGraphTestReq;
import i5.las2peer.services.ocd.ocdatestautomation.test_interfaces.WeightedGraphTestReq;
import i5.las2peer.services.ocd.testsUtils.OcdTestGraphFactory;

import java.io.FileNotFoundException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.la4j.matrix.Matrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.vector.Vector;

import i5.las2peer.services.ocd.algorithms.BinarySearchRandomWalkLabelPropagationAlgorithm;
import i5.las2peer.services.ocd.algorithms.OcdAlgorithm;
import i5.las2peer.services.ocd.algorithms.utils.OcdAlgorithmException;
import i5.las2peer.services.ocd.automatedtesting.helpers.OCDATestExceptionHandler;
import i5.las2peer.services.ocd.automatedtesting.helpers.OCDWriter;
import i5.las2peer.services.ocd.graphs.Cover;
import i5.las2peer.services.ocd.graphs.CoverCreationType;
import i5.las2peer.services.ocd.graphs.CustomGraph;
import i5.las2peer.services.ocd.graphs.GraphType;
import i5.las2peer.services.ocd.ocdatestautomation.test_interfaces.DirectedGraphTestReq;
import i5.las2peer.services.ocd.ocdatestautomation.test_interfaces.OCDAParameterTestReq;
import i5.las2peer.services.ocd.ocdatestautomation.test_interfaces.UndirectedGraphTestReq;
import i5.las2peer.services.ocd.ocdatestautomation.test_interfaces.WeightedGraphTestReq;
import i5.las2peer.services.ocd.testsUtils.OcdTestGraphFactory;
import java.util.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.graphstream.graph.Edge;
import org.graphstream.graph.Node;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.la4j.matrix.Matrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.vector.Vector;
import org.la4j.vector.Vectors;
import org.la4j.vector.dense.BasicVector;
import static i5.las2peer.services.ocd.algorithms.BinarySearchRandomWalkLabelPropagationAlgorithm.*;
import static org.junit.jupiter.api.Assertions.*;


import org.graphstream.graph.Node;

/*
LDAV=ones(1,num_vertices(SparseGraph));
LDAV=LDAV./num_vertices(SparseGraph);
LDAVNext=LDAV;
NumOfIterations=0; % it shows number of iterations to converge...
diff=1;
while(diff>0.00001)
    temp=LDAV*NDATM;
    LDAV=LDAVNext;
    LDAVNext=temp;
    diff=norm(LDAVNext-LDAV);
    NumOfIterations=NumOfIterations+1
    
end

NDATM normalized DA matrix
LDAV DA vector
 */

/*
 * Test Class for the Random Walk Label Propagation Algorithm
 */
public class BinarySearchRandomWalkLabelPropagationAlgorithmTest implements DirectedGraphTestReq, UndirectedGraphTestReq, WeightedGraphTestReq, OCDAParameterTestReq {

	OcdAlgorithm algo;

	@BeforeEach
	public void setup() {
		algo = new BinarySearchRandomWalkLabelPropagationAlgorithm();
	}

	@Override
	public OcdAlgorithm getAlgorithm() {
		return algo;
	}

	/**
	 * Auto-Generated by ChatGPT.
	 * Executes the algorithm on a weighted graph. The iteration bound is set higher to ensure the algorithm converges even in complex weighted scenarios.
	 * The precision factor is set lower than the default to achieve a finer precision, necessary for weighted graph structures.
	 */
	@Test
	public void weightedGraphTest1() throws Exception {
		try {

			CustomGraph weightedGraph = OcdTestGraphFactory.getTwoCommunitiesWeightedGraph(); // Don't modify


			Map<String, String> parameters = new HashMap<>(); // Don't modify

			// Higher iteration bound for weighted graph
			parameters.put(RANDOM_WALK_ITERATION_BOUND_NAME, "1500");
			// Finer precision factor for weighted graph
			parameters.put(RANDOM_WALK_PRECISION_FACTOR_NAME, "0.0005");

			Cover cover = getAlgorithm().detectOverlappingCommunities(weightedGraph); // Don't modify


			assertTrue(cover.getCommunities().size() >= 1); // Don't modify

		} catch (Throwable t) {

			fail("Test failed due to an exception or assertion error: " + t.getMessage()); // Don't modify


			throw t; // Don't modify

		}
	}

	/**
	 * Auto-Generated by ChatGPT.
	 * Executes the algorithm on a directed graph. Sets a higher iteration bound to accommodate the directional nature of the graph.
	 * The precision factor is moderately set to balance performance and accuracy.
	 */
	@Test
	public void directedGraphTest1() throws Exception {
		try {

			CustomGraph directedGraph = OcdTestGraphFactory.getDirectedAperiodicTwoCommunitiesGraph(); // Don't modify


			Map<String, String> parameters = new HashMap<>(); // Don't modify

			// Increased iteration bound for directed graph
			parameters.put(RANDOM_WALK_ITERATION_BOUND_NAME, "2000");
			// Moderately set precision factor
			parameters.put(RANDOM_WALK_PRECISION_FACTOR_NAME, "0.0008");

			Cover cover = getAlgorithm().detectOverlappingCommunities(directedGraph); // Don't modify


			assertTrue(cover.getCommunities().size() >= 1); // Don't modify

		} catch (Throwable t) {

			fail("Test failed due to an exception or assertion error: " + t.getMessage()); // Don't modify


			throw t; // Don't modify

		}
	}

	/**
	 * Auto-Generated by ChatGPT.
	 * Executes the BinarySearchRandomWalkLabelPropagationAlgorithm on an undirected graph.
	 * The iteration bound is set to a lower value for faster computation, assuming undirected graphs require fewer iterations.
	 * The precision factor is set to a value that ensures adequate accuracy without unnecessary computation overhead.
	 */
	@Test
	public void undirectedGraphTest1() throws Exception {
		try {

			CustomGraph undirectedGraph = OcdTestGraphFactory.getUndirectedBipartiteGraph(); // Don't modify


			Map<String, String> parameters = new HashMap<>(); // Don't modify

			// Lower iteration bound for undirected graph
			parameters.put("randomWalkIterationBound", "800");
			// Adequately set precision factor for balance
			parameters.put("randomWalkPrecisionFactor", "0.0012");

			Cover cover = getAlgorithm().detectOverlappingCommunities(undirectedGraph); // Don't modify


			assertTrue(cover.getCommunities().size() >= 1); // Don't modify

		} catch (Throwable t) {

			fail("Test failed due to an exception or assertion error: " + t.getMessage()); // Don't modify


			throw t; // Don't modify

		}
	}


	@Disabled //TODO: remove 555
	@Test
	public void testRandomWalkExecution() throws OcdAlgorithmException, InterruptedException {
		Matrix transitionMatrix = new Basic2DMatrix(2, 2);
		transitionMatrix.set(0, 0, 0.9);
		transitionMatrix.set(0, 1, 0.5);
		transitionMatrix.set(1, 0, 0.1);
		transitionMatrix.set(1, 1, 0.5);
		//System.out.println("Transition Matrix:");
		//System.out.println(transitionMatrix.transpose());
		BinarySearchRandomWalkLabelPropagationAlgorithm algo = new BinarySearchRandomWalkLabelPropagationAlgorithm();
		Map<String, String> parameters = new HashMap<String, String>();
		parameters.put(BinarySearchRandomWalkLabelPropagationAlgorithm.RANDOM_WALK_PRECISION_FACTOR_NAME, Integer.toString(1000));
		parameters.put(BinarySearchRandomWalkLabelPropagationAlgorithm.RANDOM_WALK_ITERATION_BOUND_NAME, Double.toString(0.001));
		algo.setParameters(parameters);
		Vector vec = algo.executeRandomWalk(transitionMatrix);
		//System.out.println("Steady State Vector:");
		//System.out.println(vec);
	}

	@Disabled //TODO: remove 555
	@Test
	public void testEntireAlgorithm() throws OcdAlgorithmException, InterruptedException {
		//System.out.println("Known Result Test");
		CustomGraph graph = OcdTestGraphFactory.getAperiodicTwoCommunitiesGraph();
		BinarySearchRandomWalkLabelPropagationAlgorithm algo = new BinarySearchRandomWalkLabelPropagationAlgorithm();
		Map<String, String> parameters = new HashMap<String, String>();
		parameters.put(BinarySearchRandomWalkLabelPropagationAlgorithm.RANDOM_WALK_PRECISION_FACTOR_NAME, Integer.toString(1000));
		parameters.put(BinarySearchRandomWalkLabelPropagationAlgorithm.RANDOM_WALK_ITERATION_BOUND_NAME, Double.toString(0.001));
		algo.setParameters(parameters);
		Matrix disassortativityMatrix = algo.getTransposedDisassortativityMatrix(graph);
		//System.out.println("DA M:\n" + disassortativityMatrix);
		Vector disassortativityVector = algo.executeRandomWalk(disassortativityMatrix);
		//System.out.println("DA Vec:\n" + disassortativityVector);
		Vector leadershipVector = algo.getLeadershipValues(graph,
				disassortativityVector);
		//System.out.println("LS Vec:\n" + leadershipVector);
		Map<Node, Double> followerMap = algo.getFollowerDegrees(graph,
				leadershipVector);
		//System.out.println("Follower Degs:\n" + followerMap);
		List<Node> leaders = algo.getGlobalLeaders(followerMap);
		//System.out.println("Leaders:\n" + leaders);
		Cover cover = algo.labelPropagationPhase(graph, leaders);
		System.out.println(cover);
	}

	@Disabled //TODO: remove 555
	@Test
	public void testOnSawmill() throws OcdAlgorithmException, AdapterException, FileNotFoundException, InterruptedException {
		CustomGraph graph = OcdTestGraphFactory.getSawmillGraph();
		BinarySearchRandomWalkLabelPropagationAlgorithm algo = new BinarySearchRandomWalkLabelPropagationAlgorithm();
		Map<String, String> parameters = new HashMap<String, String>();
		parameters.put(BinarySearchRandomWalkLabelPropagationAlgorithm.RANDOM_WALK_PRECISION_FACTOR_NAME, Integer.toString(1000));
		parameters.put(BinarySearchRandomWalkLabelPropagationAlgorithm.RANDOM_WALK_ITERATION_BOUND_NAME, Double.toString(0.001));
		algo.setParameters(parameters);
		Cover cover = algo.detectOverlappingCommunities(graph);
		System.out.println(cover.toString());	
	}

}
