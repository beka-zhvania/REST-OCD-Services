package i5.las2peer.services.ocd.algorithms;

import i5.las2peer.services.ocd.adapters.AdapterException;
import i5.las2peer.services.ocd.algorithms.utils.OcdAlgorithmException;
import i5.las2peer.services.ocd.graphs.Cover;
import i5.las2peer.services.ocd.graphs.CustomGraph;
import i5.las2peer.services.ocd.graphs.GraphProcessor;
import i5.las2peer.services.ocd.graphs.GraphType;
import i5.las2peer.services.ocd.metrics.OcdMetricException;
import i5.las2peer.services.ocd.ocdatestautomation.test_interfaces.OCDAParameterTestReq;
import i5.las2peer.services.ocd.ocdatestautomation.test_interfaces.UndirectedGraphTestReq;
import i5.las2peer.services.ocd.ocdatestautomation.test_interfaces.WeightedGraphTestReq;
import i5.las2peer.services.ocd.testsUtils.OcdTestGraphFactory;
import i5.las2peer.services.ocd.automatedtesting.helpers.OCDWriter;
import java.util.ArrayList;
import java.util.List;
import java.io.FileNotFoundException;
import java.util.HashSet;
import java.util.UUID;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.fail;

import java.util.HashMap;
import java.util.Map;
import org.graphstream.graph.Node;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


public class MergingOfOverlappingCommunitiesAlgorithmTest implements UndirectedGraphTestReq, WeightedGraphTestReq
		, OCDAParameterTestReq {

	OcdAlgorithm algo;

	@BeforeEach
	public void setup() {
		algo = new MergingOfOverlappingCommunitiesAlgorithm();
	}

	/**
	 * Auto-Generated by ChatGPT
	 * Executes MergingOfOverlappingCommunitiesAlgorithm on a weighted graph.
	 * This test verifies that the algorithm can correctly process graphs with weighted edges.
	 * Since the algorithm does not accept any parameters, no parameters are set.
	 */
	@Test
	public void weightedGraphTest1() throws Exception {
		try {

			CustomGraph weightedGraph = OcdTestGraphFactory.getTwoCommunitiesWeightedGraph(); // Don't modify


			Map<String, String> parameters = new HashMap<>(); // Don't modify

			// Algorithm does not accept parameters, so none are set

			getAlgorithm().setParameters(parameters); // Don't modify


			Cover cover = getAlgorithm().detectOverlappingCommunities(weightedGraph); // Don't modify


			assertTrue(cover.getCommunities().size() >= 1); // Don't modify

		} catch (Throwable t) {

			fail("Test failed due to an exception or assertion error: " + t.getMessage()); // Don't modify


			throw t; // Don't modify

		}
	}

	/**
	 * Auto-Generated by ChatGPT
	 * Executes MergingOfOverlappingCommunitiesAlgorithm on an undirected bipartite graph.
	 * This test verifies that the algorithm can correctly process undirected graphs and identify communities within them.
	 * Since the algorithm does not accept any parameters, no parameters are set.
	 */
	@Test
	public void undirectedGraphTest1() throws Exception {
		try {

			CustomGraph undirectedGraph = OcdTestGraphFactory.getUndirectedBipartiteGraph(); // Don't modify
			Map<String, String> parameters = new HashMap<>(); // Don't modify
			// Algorithm does not accept parameters, so none are set
			getAlgorithm().setParameters(parameters); // Don't modify
			Cover cover = getAlgorithm().detectOverlappingCommunities(undirectedGraph); // Don't modify
			assertTrue(cover.getCommunities().size() >= 1); // Don't modify

		} catch (Throwable t) {

			fail("Test failed due to an exception or assertion error: " + t.getMessage()); // Don't modify


			throw t; // Don't modify

		}
	}

	@Override
	public OcdAlgorithm getAlgorithm() {
		return algo;
	}

	@Disabled //TODO: remove 555
	@Test
	public void testOnAperiodicTwoCommunities() throws OcdAlgorithmException, InterruptedException, OcdMetricException {
		CustomGraph graph = OcdTestGraphFactory
				.getAperiodicTwoCommunitiesGraph();
		OcdAlgorithm algo = new MergingOfOverlappingCommunitiesAlgorithm();
		Cover cover = algo.detectOverlappingCommunities(graph);
		//System.out.println(cover.toString());
	}

	@Disabled //TODO: remove 555
	@Test
	public void testOnSawmill() throws OcdAlgorithmException, AdapterException, FileNotFoundException, InterruptedException, OcdMetricException {
		CustomGraph graph = OcdTestGraphFactory.getSawmillGraph();
		OcdAlgorithm algo = new MergingOfOverlappingCommunitiesAlgorithm();
		Cover cover = algo.detectOverlappingCommunities(graph);
		//System.out.println(cover.toString());
	}

	@Disabled //TODO: remove 555
	@Test
	public void testOnKnowResultGraph() throws OcdAlgorithmException, InterruptedException, OcdMetricException {
		CustomGraph graph = new CustomGraph();
		Node node0 = graph.addNode("0");
		Node node1 = graph.addNode("1");
		Node node2 = graph.addNode("2");
		Node node3 = graph.addNode("3");
		Node node4 = graph.addNode("4");
		Node node5 = graph.addNode("5");
		graph.addEdge(UUID.randomUUID().toString(), node0, node1);
		graph.addEdge(UUID.randomUUID().toString(), node0, node2);
		graph.addEdge(UUID.randomUUID().toString(), node0, node3);
		graph.addEdge(UUID.randomUUID().toString(), node1, node2);
		graph.addEdge(UUID.randomUUID().toString(), node3, node4);
		graph.addEdge(UUID.randomUUID().toString(), node3, node5);
		GraphProcessor processor = new GraphProcessor();
		graph.addType(GraphType.DIRECTED);
		processor.makeCompatible(graph, new HashSet<GraphType>());
		OcdAlgorithm algo = new MergingOfOverlappingCommunitiesAlgorithm();
		Cover cover = algo.detectOverlappingCommunities(graph);
		//System.out.println(cover.toString());
	}

	
}
