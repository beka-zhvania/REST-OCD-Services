package i5.las2peer.services.ocd.algorithms;

import i5.las2peer.services.ocd.adapters.AdapterException;
import i5.las2peer.services.ocd.algorithms.utils.OcdAlgorithmException;
import i5.las2peer.services.ocd.graphs.Cover;
import i5.las2peer.services.ocd.graphs.CustomGraph;
import i5.las2peer.services.ocd.metrics.OcdMetricException;
import i5.las2peer.services.ocd.ocdatestautomation.test_interfaces.OCDAParameterTestReq;
import i5.las2peer.services.ocd.ocdatestautomation.test_interfaces.UndirectedGraphTestReq;
import i5.las2peer.services.ocd.ocdatestautomation.test_interfaces.WeightedGraphTestReq;
import i5.las2peer.services.ocd.testsUtils.OcdTestGraphFactory;

import java.io.FileNotFoundException;
import java.util.HashMap;
import java.util.Map;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Assertions.assertTrue;

//TODO: GRAPHSTREAM UPGRADE: Check with further graphs, the tests here give every node the same belonging to every community. This is intended but not exhaustive enough
public class NISEAlgorithmTest implements UndirectedGraphTestReq, WeightedGraphTestReq, OCDAParameterTestReq {


	OcdAlgorithm algo;

	@BeforeEach
	public void setup() {
		algo = new NISEAlgorithm();
	}

	@Override
	public OcdAlgorithm getAlgorithm() {
		return algo;
	}

	/**
	 * Auto-Generated by ChatGPT.
	 * Tests NISEAlgorithm on a weighted graph. Sets seedCount to a high value to detect more communities.
	 * Sets probability to a moderate value to balance the expansion step.
	 * Sets accuracy to a moderate value to control the size of the resulting communities.
	 */
	@Test
	public void weightedGraphTest1() throws Exception {
		try {

			CustomGraph weightedGraph = OcdTestGraphFactory.getTwoCommunitiesWeightedGraph(); // Don't modify
			Map<String, String> parameters = new HashMap<>(); // Don't modify
			// Chosen to detect more communities
			parameters.put("seedCount", "15");
			// Chosen to balance the expansion step
			parameters.put("probability", "0.75");
			// Chosen to control the size of the communities
			parameters.put("accuracy", "0.0001");
			getAlgorithm().setParameters(parameters); // Don't modify
			Cover cover = getAlgorithm().detectOverlappingCommunities(weightedGraph); // Don't modify
			assertTrue(cover.getCommunities().size() >= 1); // Don't modify

		} catch (Throwable t) {

			fail("Test failed due to an exception or assertion error: " + t.getMessage()); // Don't modify


			throw t; // Don't modify

		}
	}

	/**
	 * Auto-Generated by ChatGPT.
	 * Tests NISEAlgorithm on an undirected bipartite graph. Sets seedCount to a lower value to focus on major communities.
	 * Sets probability to a high value to ensure strong expansion.
	 * Sets accuracy to a low value to generate larger communities, given the bipartite nature of the graph.
	 */
	@Test
	public void undirectedGraphTest1() throws Exception {
		try {

			CustomGraph undirectedGraph = OcdTestGraphFactory.getUndirectedBipartiteGraph(); // Don't modify
			Map<String, String> parameters = new HashMap<>(); // Don't modify
			// Chosen to focus on major communities
			parameters.put("seedCount", "5");
			// Chosen to ensure strong expansion
			parameters.put("probability", "0.95");
			// Chosen to generate larger communities
			parameters.put("accuracy", "0.0000001");
			getAlgorithm().setParameters(parameters); // Don't modify
			Cover cover = getAlgorithm().detectOverlappingCommunities(undirectedGraph); // Don't modify
			assertTrue(cover.getCommunities().size() >= 1); // Don't modify

		} catch (Throwable t) {

			fail("Test failed due to an exception or assertion error: " + t.getMessage()); // Don't modify


			throw t; // Don't modify

		}
	}

	@Disabled //TODO: remove 555
	@Test
	public void testOnAperiodicTwoCommunities() throws OcdAlgorithmException, InterruptedException, OcdMetricException {
		CustomGraph graph = OcdTestGraphFactory.getAperiodicTwoCommunitiesGraph();
		OcdAlgorithm algorithm = new NISEAlgorithm();
		Map<String, String> parameters = new HashMap<String, String>();
		parameters.put(NISEAlgorithm.ACCURACY_NAME, "0.0000001");
		algorithm.setParameters(parameters);
		Cover cover = algorithm.detectOverlappingCommunities(graph);
		//System.out.println(cover.toString());
	}


	@Disabled //TODO: remove 555
	@Test
	public void testOnSignedLfrMadeUndirectedGraph() throws OcdAlgorithmException, InterruptedException, OcdMetricException, FileNotFoundException, AdapterException {
		CustomGraph graph = OcdTestGraphFactory.getSignedLfrMadeUndirectedGraph();
		OcdAlgorithm algorithm = new NISEAlgorithm();
		Map<String, String> parameters = new HashMap<String, String>();
		algorithm.setParameters(parameters);
		Cover cover = algorithm.detectOverlappingCommunities(graph);
		//System.out.println(cover.toString());
	}

}
