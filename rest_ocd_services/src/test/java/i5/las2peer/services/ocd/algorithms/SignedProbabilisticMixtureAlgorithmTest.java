package i5.las2peer.services.ocd.algorithms;

import java.io.FileNotFoundException;
import java.util.HashMap;
import java.util.Map;

import i5.las2peer.services.ocd.ocdatestautomation.test_interfaces.NegativeWeightsGraphTestReq;
import i5.las2peer.services.ocd.ocdatestautomation.test_interfaces.OCDAParameterTestReq;
import i5.las2peer.services.ocd.ocdatestautomation.test_interfaces.UndirectedGraphTestReq;
import i5.las2peer.services.ocd.ocdatestautomation.test_interfaces.WeightedGraphTestReq;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import i5.las2peer.services.ocd.adapters.AdapterException;
import i5.las2peer.services.ocd.algorithms.utils.OcdAlgorithmException;
import i5.las2peer.services.ocd.graphs.Cover;
import i5.las2peer.services.ocd.graphs.CustomGraph;
import i5.las2peer.services.ocd.graphs.GraphProcessor;
import i5.las2peer.services.ocd.testsUtils.OcdTestGraphFactory;

import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class SignedProbabilisticMixtureAlgorithmTest implements UndirectedGraphTestReq, WeightedGraphTestReq,
        NegativeWeightsGraphTestReq, OCDAParameterTestReq {

	OcdAlgorithm algo;

	@BeforeEach
	public void setup() {
		algo = new SignedProbabilisticMixtureAlgorithm();
	}

	@Override
	public OcdAlgorithm getAlgorithm() {
		return algo;
	}

	/**
	 * Auto-Generated by ChatGPT.
	 * Executes SignedProbabilisticMixtureAlgorithm on a graph with negative weights.
	 * The trialCount parameter is set to test the algorithm's performance with a higher number of trials.
	 * The communityCount is set to a lower value to test algorithm performance with fewer communities.
	 * The minLikelihoodDifference is set to a smaller value to allow finer detection of community structures.
	 */
	@Test
	public void negativeWeightsGraphTest1() throws Exception {
		try {

			CustomGraph negativeWeightsGraph = OcdTestGraphFactory.getMixedWeightsGraph(); // Don't modify
			Map<String, String> parameters = new HashMap<>(); // Don't modify
			// Increased number of trials for thorough testing
			parameters.put("trialCount", "7");
			// Decreased number of communities for targeted testing
			parameters.put("communityCount", "3");
			// Decreased likelihood difference for fine-tuning
			parameters.put("minLikelihoodDifference", "0.1");
			getAlgorithm().setParameters(parameters); // Don't modify
			Cover cover = getAlgorithm().detectOverlappingCommunities(negativeWeightsGraph); // Don't modify
			assertTrue(cover.getCommunities().size() >= 1); // Don't modify

		} catch (Throwable t) {

			fail("Test failed due to an exception or assertion error: " + t.getMessage()); // Don't modify


			throw t; // Don't modify

		}
	}

	/**
	 * Auto-Generated by ChatGPT.
	 * Executes SignedProbabilisticMixtureAlgorithm on a weighted graph.
	 * The trialCount parameter is set to a lower value to test the algorithm's sensitivity to fewer trials.
	 * The communityCount is increased to test the algorithm's scalability.
	 * The minLikelihoodDifference is increased to test the algorithm's response to coarser likelihood differences.
	 */
	@Test
	public void weightedGraphTest1() throws Exception {
		try {

			CustomGraph weightedGraph = OcdTestGraphFactory.getTwoCommunitiesWeightedGraph(); // Don't modify
			Map<String, String> parameters = new HashMap<>(); // Don't modify
			// Decreased number of trials for sensitivity testing
			parameters.put("trialCount", "2");
			// Increased number of communities for scalability testing
			parameters.put("communityCount", "10");
			// Increased likelihood difference for coarse-tuning
			parameters.put("minLikelihoodDifference", "5");
			getAlgorithm().setParameters(parameters); // Don't modify
			Cover cover = getAlgorithm().detectOverlappingCommunities(weightedGraph); // Don't modify
			assertTrue(cover.getCommunities().size() >= 1); // Don't modify

		} catch (Throwable t) {

			fail("Test failed due to an exception or assertion error: " + t.getMessage()); // Don't modify


			throw t; // Don't modify

		}
	}

	/**
	 * Auto-Generated by ChatGPT.
	 * Executes SignedProbabilisticMixtureAlgorithm on an undirected bipartite graph.
	 * The trialCount parameter is set to test the algorithm's performance with a moderate number of trials.
	 * The communityCount is set to the default value to observe the algorithm's performance under standard conditions.
	 * The minLikelihoodDifference is significantly increased to test the algorithm's tolerance to large likelihood differences.
	 */
	@Test
	public void undirectedGraphTest1() throws Exception {
		try {

			CustomGraph undirectedGraph = OcdTestGraphFactory.getUndirectedBipartiteGraph(); // Don't modify
			Map<String, String> parameters = new HashMap<>(); // Don't modify
			// Moderate number of trials for balanced testing
			parameters.put("trialCount", "5");
			// Default number of communities for standard conditions
			parameters.put("communityCount", "6");
			// Significantly increased likelihood difference for robustness testing
			parameters.put("minLikelihoodDifference", "20");
			getAlgorithm().setParameters(parameters); // Don't modify
			Cover cover = getAlgorithm().detectOverlappingCommunities(undirectedGraph); // Don't modify
			assertTrue(cover.getCommunities().size() >= 1); // Don't modify

		} catch (Throwable t) {

			fail("Test failed due to an exception or assertion error: " + t.getMessage()); // Don't modify
			throw t; // Don't modify

		}
	}

	@Disabled //TODO: remove 555
	@Test
	public void testSmall()
			throws FileNotFoundException, AdapterException, OcdAlgorithmException, InterruptedException {
		CustomGraph graph = OcdTestGraphFactory.getSimpleGraphDirectedWeighted();
		SignedProbabilisticMixtureAlgorithm algo = new SignedProbabilisticMixtureAlgorithm();
		GraphProcessor processor = new GraphProcessor();
		processor.makeUndirected(graph);
		Cover cover = algo.detectOverlappingCommunities(graph);
		//System.out.println("Detected Cover:");
		//System.out.println(cover.toString());
	}

	@Disabled //TODO: remove 555
	@Test
	public void testLfrSmall()
			throws FileNotFoundException, AdapterException, OcdAlgorithmException, InterruptedException {
		CustomGraph graph = OcdTestGraphFactory.getSignedLfrSixNodesGraph();
		SignedProbabilisticMixtureAlgorithm algo = new SignedProbabilisticMixtureAlgorithm();
		GraphProcessor processor = new GraphProcessor();
		processor.makeUndirected(graph);
		Cover cover = algo.detectOverlappingCommunities(graph);
		//System.out.println("Detected Cover:");
		//System.out.println(cover.toString());
	}
	

}
