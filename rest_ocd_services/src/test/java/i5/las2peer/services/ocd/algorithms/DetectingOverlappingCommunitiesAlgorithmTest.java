package i5.las2peer.services.ocd.algorithms;

import i5.las2peer.services.ocd.adapters.AdapterException;
import i5.las2peer.services.ocd.algorithms.utils.OcdAlgorithmException;
import i5.las2peer.services.ocd.graphs.Cover;
import i5.las2peer.services.ocd.graphs.CustomGraph;
import i5.las2peer.services.ocd.metrics.OcdMetricException;
import i5.las2peer.services.ocd.ocdatestautomation.test_interfaces.OCDAParameterTestReq;
import i5.las2peer.services.ocd.ocdatestautomation.test_interfaces.UndirectedGraphTestReq;
import i5.las2peer.services.ocd.testsUtils.OcdTestGraphFactory;

import java.io.FileNotFoundException;
import java.util.HashMap;
import java.util.Map;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.fail;

public class DetectingOverlappingCommunitiesAlgorithmTest implements UndirectedGraphTestReq, OCDAParameterTestReq {

	OcdAlgorithm algo;

	@BeforeEach
	public void setup() {
		algo = new DetectingOverlappingCommunitiesAlgorithm();
	}

	@Override
	public OcdAlgorithm getAlgorithm() {
		return algo;
	}

	/**
	 * Auto-Generated by ChatGPT
	 * Executes the DetectingOverlappingCommunitiesAlgorithm on an undirected bipartite graph.
	 * Sets the overlappingThreshold parameter of the algorithm to a value that tests the algorithm's
	 * ability to handle input near the lower boundary of its valid range, thus ensuring robustness.
	 */
	@Test
	public void undirectedGraphTest1() throws Exception {
		try {

			CustomGraph undirectedGraph = OcdTestGraphFactory.getUndirectedBipartiteGraph(); // Don't modify
			Map<String, String> parameters = new HashMap<>(); // Don't modify
			// Set overlappingThreshold parameter to test boundary condition
			parameters.put("overlappingThreshold", "0.1");
			// Set the algorithm parameters
			getAlgorithm().setParameters(parameters);
			Cover cover = getAlgorithm().detectOverlappingCommunities(undirectedGraph); // Don't modify
			assertTrue(cover.getCommunities().size() >= 1); // Don't modify

		} catch (Throwable t) {

			fail("Test failed due to an exception or assertion error: " + t.getMessage()); // Don't modify


			throw t; // Don't modify

		}
	}


	@Disabled //TODO:DELETE 333
	@Test
	public void test() throws OcdAlgorithmException, InterruptedException, FileNotFoundException, AdapterException, OcdMetricException {
		OcdAlgorithm algo = new DetectingOverlappingCommunitiesAlgorithm();
		CustomGraph graph = OcdTestGraphFactory.getDocaTestGraph();
		//System.out.println("Nodes " + graph.getNodeCount() + " Edges " + graph.getEdgeCount());
		Cover cover = algo.detectOverlappingCommunities(graph);
		//System.out.println(cover.toString());
	}

}
