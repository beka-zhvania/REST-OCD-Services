package i5.las2peer.services.ocd.algorithms;

import java.io.FileNotFoundException;
import java.util.HashMap;
import java.util.Map;

import i5.las2peer.services.ocd.adapters.AdapterException;
import i5.las2peer.services.ocd.graphs.Cover;
import i5.las2peer.services.ocd.graphs.CustomGraph;
import i5.las2peer.services.ocd.ocdatestautomation.test_interfaces.OCDAParameterTestReq;
import i5.las2peer.services.ocd.ocdatestautomation.test_interfaces.UndirectedGraphTestReq;
import i5.las2peer.services.ocd.testsUtils.OcdTestGraphFactory;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import static i5.las2peer.services.ocd.algorithms.SpeakerListenerLabelPropagationAlgorithm.MEMORY_SIZE_NAME;
import static i5.las2peer.services.ocd.algorithms.SpeakerListenerLabelPropagationAlgorithm.PROBABILITY_THRESHOLD_NAME;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Assertions.assertTrue;

/*
 * Test Class for the Speaker Listener Label Propagation Algorithm
 */
public class SpeakerListenerLabelPropagationAlgorithmTest implements UndirectedGraphTestReq, OCDAParameterTestReq {

	OcdAlgorithm algo;

	@BeforeEach
	public void setup() {
		algo = new SpeakerListenerLabelPropagationAlgorithm();
	}

	@Override
	public OcdAlgorithm getAlgorithm() {
		return algo;
	}

	/**
	 * Auto-Generated by ChatGPT
	 * Tests the SpeakerListenerLabelPropagationAlgorithm on an undirected bipartite graph.
	 * Sets memorySize to a high value to test the algorithm's performance with extensive node memories.
	 * Sets probabilityThreshold to a value within the recommended range but different from the default to assess the algorithm's label processing sensitivity.
	 */
	@Test
	public void undirectedGraphTest1() throws Exception {
		try {

			CustomGraph undirectedGraph = OcdTestGraphFactory.getUndirectedBipartiteGraph(); // Don't modify
			Map<String, String> parameters = new HashMap<>(); // Don't modify
			// Set memorySize significantly higher than default
			parameters.put(MEMORY_SIZE_NAME, "500");
			// Set probabilityThreshold within recommended range but not default
			parameters.put(PROBABILITY_THRESHOLD_NAME, "0.05");
			getAlgorithm().setParameters(parameters); // Don't modify
			Cover cover = getAlgorithm().detectOverlappingCommunities(undirectedGraph); // Don't modify
			assertTrue(cover.getCommunities().size() >= 1); // Don't modify

		} catch (Throwable t) {

			fail("Test failed due to an exception or assertion error: " + t.getMessage()); // Don't modify


			throw t; // Don't modify

		}
	}

	/**
	 * Test the SLPA Algorithm on a simple Graph
	 * @throws InterruptedException 
	 */
	@Disabled //TODO: remove 555
	@Test
	public void testOnTwoCommunities() throws InterruptedException
	{
		CustomGraph graph = OcdTestGraphFactory.getTwoCommunitiesGraph();
		SpeakerListenerLabelPropagationAlgorithm algo = new SpeakerListenerLabelPropagationAlgorithm();
		Cover cover = algo.detectOverlappingCommunities(graph);
		//System.out.println(cover.toString());
	}

	@Disabled //TODO: remove 555
	@Test
	public void testOnSawmill() throws AdapterException, FileNotFoundException, InterruptedException
	{
		CustomGraph graph = OcdTestGraphFactory.getSawmillGraph();
		SpeakerListenerLabelPropagationAlgorithm algo = new SpeakerListenerLabelPropagationAlgorithm();
		Cover cover = algo.detectOverlappingCommunities(graph);
		//System.out.println(cover.toString());
	}
}
